using System.Collections;
using UnityEngine;
using UnityEngine.AI;

public class WeepingAngelAI : MonoBehaviour
{
    public NavMeshAgent ai;
    public Transform player;
    public Camera playerCam;

    public float aiSpeed;
    public float catchDistance;
    public float activationDistance;
    public AudioSource jumpScareSound;
    public AudioSource backgroundMusic;
    public AudioSource movementSound;
    public Renderer angelRenderer;

    private Vector3 dest;
    private bool isActivated = false;
    private bool isSoundPlayed = false;
    private Plane[] frustumPlanes;
    private Vector3 lastPlayerPosition;

    void Start()
    {
        ai.speed = 0;

        // Warm-up
        ai.SetDestination(transform.position);

        if (angelRenderer != null)
        {
            var bounds = angelRenderer.bounds; // Pre-cache bounds
        }

        if (jumpScareSound != null) jumpScareSound.volume = 0.01f;
        if (movementSound != null) movementSound.volume = 0.01f;

        if (jumpScareSound != null) jumpScareSound.Play();
        if (movementSound != null) movementSound.Play();

        StartCoroutine(StopWarmupSounds());
    }

    IEnumerator StopWarmupSounds()
    {
        yield return null;
        if (jumpScareSound != null)
        {
            jumpScareSound.Stop();
            jumpScareSound.volume = 1f;
        }
        if (movementSound != null)
        {
            movementSound.Stop();
            movementSound.volume = 1f;
        }
    }

    void Update()
    {
        frustumPlanes = GeometryUtility.CalculateFrustumPlanes(playerCam);

        float distanceToPlayer = Vector3.Distance(transform.position, player.position);

        if (!isActivated && distanceToPlayer <= activationDistance && IsAngelInCenterOfScreen())
        {
            ActivateAngel();
        }

        if (isActivated)
        {
            bool isCurrentlyVisible = GeometryUtility.TestPlanesAABB(frustumPlanes, angelRenderer.bounds);

            if (!isCurrentlyVisible)
            {
                MoveTowardsPlayer();
            }
            else
            {
                StopAngelMovement();
            }
        }
    }

    void ActivateAngel()
    {
        isActivated = true;

        if (!isSoundPlayed)
        {
            jumpScareSound?.Play();
            isSoundPlayed = true;
        }

        if (backgroundMusic != null && !backgroundMusic.isPlaying)
        {
            backgroundMusic.Play();
        }
    }

    void MoveTowardsPlayer()
    {
        Vector3 playerPosition = player.position;

        if (Vector3.Distance(playerPosition, lastPlayerPosition) > 0.1f)
        {
            lastPlayerPosition = playerPosition;
            ai.SetDestination(playerPosition);
        }

        ai.speed = aiSpeed;

        Vector3 lookDirection = player.position - transform.position;
        lookDirection.y = 0;
        Quaternion targetRotation = Quaternion.LookRotation(lookDirection);
        transform.rotation = targetRotation;

        if (!movementSound.isPlaying) movementSound.Play();

        if (Vector3.Distance(transform.position, player.position) <= catchDistance)
        {
            Debug.Log("Player died");
            isActivated = false;
            ai.speed = 0;

            movementSound.Stop();
        }
    }

    void StopAngelMovement()
    {
        ai.speed = 0;
        ai.SetDestination(transform.position);

        if (movementSound.isPlaying) movementSound.Stop();
    }

    bool IsAngelInCenterOfScreen()
    {
        Vector3 screenPoint = playerCam.WorldToViewportPoint(transform.position);
        return screenPoint.z > 0 && Mathf.Abs(screenPoint.x - 0.5f) < 0.1f && Mathf.Abs(screenPoint.y - 0.5f) < 0.1f;
    }
}
